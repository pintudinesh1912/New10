{
	"info": {
		"_postman_id": "64bef1dc-5975-4ed1-b3f3-b804fca5d4be",
		"name": "BestBuyAPI-Services",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Scenarios for GET services",
			"item": [
				{
					"name": "As a user, I want to get all the services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "05eeccce-147e-4bcf-97bc-d8fc655bb7db",
								"exec": [
									"pm.globals.set(\"servicesUrl\", \"http://localhost:3030/services/\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4fd0bb5f-7709-4b27-b8d1-ac7be2090415",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.test(\"Check limit value\", function () {",
									"limitValue=json_response.limit;",
									"pm.expect(limitValue).to.equal(10);",
									"});",
									"pm.test(\"Check the number of services in the output response\", function () {",
									"pm.expect(Object.keys(json_response.data).length).to.eql(10);",
									"});",
									"pm.test(\"Check if total number of services is displayed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}",
							"host": [
								"{{servicesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get only limited count of services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ebd1ba6a-489b-4419-b57c-175b7b00b7c4",
								"exec": [
									"pm.environment.set(\"limitVal\", \"5\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e27e0ff-ef63-4b8b-a0d9-f2c20d5e5d7b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"tests ['Check if limit value is same as input'] = environment.limitVal == json_response.limit;",
									"tests ['Check if the number of services displayed in the output is same as the input limit'] = environment.limitVal == Object.keys(json_response.data).length;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?$limit={{limitVal}}",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "$limit",
									"value": "{{limitVal}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get services only after a specific value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c992d93-cd60-4274-a0cc-abc3863dcdaf",
								"exec": [
									"pm.environment.set(\"skipVal\", \"15\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "824efc68-80a8-47df-aeec-e01debb86e22",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.test(\"Check the skip value in output response is same as input\", function () {",
									"pm.expect(json_response.skip).to.equal(15);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?$skip={{skipVal}}",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "$skip",
									"value": "{{skipVal}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get all the services with only their name in the output response ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5d4abca-beb2-4438-9484-a4a531ae9793",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Check if the output response has property name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"pm.test(\"Check that output response does not have property-id\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"id\");",
									"});",
									"pm.test(\"Check that output response does not have property-createdAt\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"createdAt\");",
									"});",
									"pm.test(\"Check that output response does not have property-updatedAt\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?$select[]=name",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "$select[]",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get all services that have a specific text in their name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6dd0961c-8b84-40ab-b6be-2835f0f7064f",
								"exec": [
									"pm.environment.set(\"namelikeVal\", \"Best Buy\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e617eb7d-bd57-438e-91a0-4ecb102add6d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Check if the output response has specific name text\", function () {",
									"    pm.expect(pm.response.text()).to.include(environment.namelikeVal);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?name[$like]=*{{namelikeVal}}*",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "name[$like]",
									"value": "*{{namelikeVal}}*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get all services sorted in descending order of their ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a605a639-d8df-4477-80c9-31f55f9e18dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.environment.set(\"idfirstVal\", json_response.data[0].id);",
									"console.log(json_response.data[0].id);",
									"pm.test(\"Check that the services are sorted in descending order as first id value is not equal to 1\", function () {",
									"pm.expect(environment.idfirstVal).to.not.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?$sort[id]=-1",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "$sort[id]",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I want to get services based on combination of input such as name and sorted by descending order on ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3cc2d0d-98ce-4f81-a394-55b538ff7d36",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.environment.set(\"idfirstVal\", json_response.data[0].id);",
									"console.log(json_response.data[0].id);",
									"pm.test(\"Check that the services are sorted in descending order as first id value is not equal to 1\", function () {",
									"pm.expect(environment.idfirstVal).to.not.equal(1);",
									"});",
									"pm.test(\"Check if the output response has specific name text\", function () {",
									"    pm.expect(pm.response.text()).to.include(environment.namelikeVal);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?$sort[id]=-1&name[$like]=*{{namelikeVal}}*",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "$sort[id]",
									"value": "-1"
								},
								{
									"key": "name[$like]",
									"value": "*{{namelikeVal}}*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I get an error response when I get a service with name that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99cf4dbf-0de3-40b2-8cc6-8006f6a83526",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"tests[\"Check that the data value in the output response is empty\"] = (json_response.data===null || json_response.data.length===0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "42b2cca1-d87f-4545-b6fd-f7244a4e330c",
								"exec": [
									"pm.environment.set(\"incorrectname\", \"abc\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}?name={{incorrectname}}",
							"host": [
								"{{servicesUrl}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{incorrectname}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains the postive and negative scenarios for getting services based on different input conditions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef1b49f3-f0dd-45a2-87a4-f1ec3e9ead12",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "efb6fdb4-9402-44fe-918a-4dc3299d46de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios for GET services with ID",
			"item": [
				{
					"name": "As a user, I want to get a service with specific ID value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1f82ffe-7a15-443e-a2a9-f3b4a28cd7aa",
								"exec": [
									"pm.environment.set(\"serviceId\", \"1\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f6b0beb-2473-4053-9669-6b9347e87d1e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"tests ['Check the value of id in the output response'] = environment.serviceId == json_response.id;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}{{serviceId}}",
							"host": [
								"{{servicesUrl}}{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I get error response when I get a service with ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e01d757-82c2-436c-abb0-6342afd6d43e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.test(\"Check the error message is correct\", function () {",
									"    pm.expect(json_response.message).to.eql(\"No record found for id '2000'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}2000",
							"host": [
								"{{servicesUrl}}2000"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains the positive and negative scenarios for getting services for a specific ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c8732525-bd3f-4b9d-9efe-41afd3c1eeee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3cbfdc6e-7f89-4607-b47d-24179220a6ed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios for POST services",
			"item": [
				{
					"name": "As a user, I want to create a service successfully with all mandatory inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29d3151c-d2e8-459e-adaa-aebe99c4b63d",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"tests[\"Check that the output response contains some values for id and name\"] = (json_response.id!==null && json_response.name!==null && responseBody.length!==0);",
									"pm.globals.set(\"idresponse\", json_response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Credit Facilities\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servicesUrl}}",
							"host": [
								"{{servicesUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I get error response when I create service with empty mandatory input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56d5b6c2-87a5-4a90-9c3c-085d030d7b89",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.test(\"Check the message displayed\", function () {",
									"    pm.expect(json_response.message).to.eql(\"Invalid Parameters\");",
									"});",
									"pm.test(\"Check the error displayed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"should have required property 'name'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\"\n}"
						},
						"url": {
							"raw": "{{servicesUrl}}",
							"host": [
								"{{servicesUrl}}"
							]
						},
						"description": "Client side validation"
					},
					"response": []
				}
			],
			"description": "This folder contains the positive and negative scenarios for creating a service with the required inputs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8ec81453-b652-4fef-84a7-5da75dad2dae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84233f06-7f92-44c8-aa06-6d4dadf5695a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios for PATCH services",
			"item": [
				{
					"name": "As a user, I want to update details of service with a specific ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12cf6840-0809-4e60-9e9d-d6aea11f1b2a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"json_response = JSON.parse(responseBody);",
									"pm.test(\"Your test name\", function () {",
									"    pm.expect(json_response.name).to.eql(\"Credit Facilities_updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "786d50ce-a45f-4f4b-b617-826d1bcc049a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Credit Facilities_updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servicesUrl}}{{idresponse}}",
							"host": [
								"{{servicesUrl}}{{idresponse}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I get error response when I update details of service with ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f758c55-7c71-4f6e-8fd3-1077e760d065",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Check that the output response contains the correct error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"No record found for id '3000abc'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Credit Facilities\"\n}"
						},
						"url": {
							"raw": "{{servicesUrl}}3000abc",
							"host": [
								"{{servicesUrl}}3000abc"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains the positive and negative scenarios for updating the services based on ID as input",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "287dec40-17eb-44c1-862e-fd4340fce24d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "81dacd61-f533-4fb2-9b45-931cc5a7ee2d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios for DELETE services",
			"item": [
				{
					"name": "As a user, I want to delete a specific service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7df70-7b17-413d-a21b-d54e1531fd56",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.globals.get(\"idresponse\");",
									"pm.test(\"Check that the output response contains the deleted service id\", function () {",
									"    json_response = JSON.parse(responseBody);",
									"    pm.expect(json_response.id).to.eql(pm.globals.get(\"idresponse\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}{{idresponse}}",
							"host": [
								"{{servicesUrl}}{{idresponse}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user, I get error response when I delete a service with ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf0a80d-376e-47d5-b74e-54eff4f2224b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Check the error message displayed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"No record found for id '100abc'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{servicesUrl}}100abc",
							"host": [
								"{{servicesUrl}}100abc"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains the positive and negative scenarios for deleting services based on ID as input",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}